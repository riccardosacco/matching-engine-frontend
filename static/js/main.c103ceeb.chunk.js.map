{"version":3,"sources":["context/app.context.js","components/Header.tsx","components/TextInput.tsx","components/SelectInput.tsx","components/TextResponse.tsx","App.tsx","serviceWorker.ts","context/app.reducer.js","context/app.types.js","globals.ts","context/app.state.js","index.tsx"],"names":["context","React","createContext","undefined","Header","className","href","TextInput","id","label","value","onChange","htmlFor","type","SelectInput","options","map","option","key","disabled","TextResponse","rows","onClick","copyText","document","getElementById","select","setSelectionRange","execCommand","JSON","stringify","App","useState","query_title","query_director","query_year","form","setForm","inputChange","e","target","useContext","Context","query","result","generateQuery","executeQuery","changeQuery","contentType","setContentType","Boolean","window","location","hostname","match","state","action","payload","State","props","useReducer","reducer","dispatch","a","parse","err","console","log","params","axios","get","globals","response","data","post","Provider","children","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c103ceeb.chunk.js","sourcesContent":["import React from \"react\";\n\nconst context = React.createContext(undefined);\n\nexport default context;\n","import React from 'react'\n\nconst Header: React.FC = () => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-primary mb-3\">\n      <div className=\"container\">\n        <a className=\"navbar-brand\" href=\"/\">Matching Engine Frontend</a>\n      </div>\n    </nav>\n  )\n}\n\nexport default Header;\n","import React from 'react'\n\ntype TextInputProps = {\n  id: string,\n  label: string,\n  value: string,\n  onChange: (e: React.ChangeEvent) => any\n}\n\nconst TextInput: React.FC<TextInputProps> = ({\n  id,\n  label,\n  value,\n  onChange\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={id}>{label}</label>\n      <input className=\"form-control\" type=\"text\" id={id} value={value} onChange={onChange} />\n    </div>\n  )\n}\n\nexport default TextInput\n","import React from 'react'\n\ntype SelectOption = {\n  value: string,\n  label: string,\n  disabled?: boolean\n}\n\ntype SelectInputProps = {\n  id: string,\n  label: string,\n  value: string,\n  options: SelectOption[],\n  onChange: (e: React.ChangeEvent) => any\n}\n\nconst SelectInput: React.FC<SelectInputProps> = ({\n  id,\n  label,\n  value,\n  options,\n  onChange\n}) => {\n  return (\n    <div className=\"form-group\">\n      <label htmlFor={id}>{label}</label>\n      <select className=\"form-control\" id={id} value={value} onChange={onChange}>\n        {options.map(option => (\n          <option key={option.value} value={option.value} disabled={option.disabled}>{option.label}</option>\n        ))}\n      </select>\n    </div>\n  )\n}\n\nexport default SelectInput\n","import React from 'react'\n\ntype TextResponseProps = {\n  id: string,\n  label: string,\n  value: string,\n  rows?: number,\n  onChange?: (e: React.ChangeEvent) => any\n}\n\nconst TextResponse: React.FC<TextResponseProps> = ({\n  id,\n  label,\n  value,\n  rows,\n  onChange\n  \n}) => {\n\n  const copyClipboard = () => {\n      /* Get the text field */\n      const copyText = document.getElementById(id) as HTMLTextAreaElement;\n    \n      /* Select the text field */\n      if(copyText){\n        copyText.select();\n        copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n      }\n    \n      /* Copy the text inside the text field */\n      document.execCommand(\"copy\");\n  }\n  return (\n    <div className=\"form-group\">\n      <div className=\"d-flex justify-content-between align-items-center mb-1\">\n        <label className=\"m-0\" htmlFor={id}>{label}</label>\n        <div>\n          <input className=\"btn btn-sm btn-secondary\" type=\"button\" value=\"Copy\" onClick={copyClipboard}/>\n        </div>\n      </div>\n      <textarea className=\"form-control\" id={id} rows={rows} onChange={onChange} value={JSON.stringify(value, null, 2)}></textarea>\n    </div>\n  )\n}\n\nexport default TextResponse\n","import React, { useState, useContext } from 'react';\n\n// Import Context state\nimport Context from \"./context/app.context\"\n\n// Import components\nimport Header from \"./components/Header\"\nimport TextInput from \"./components/TextInput\"\nimport SelectInput from \"./components/SelectInput\"\nimport TextResponse from \"./components/TextResponse\"\n\nimport \"./assets/styles.scss\";\n\nconst App: React.FC = () =>  {\n\n  const [form, setForm] = useState({\n    query_title: \"\",\n    query_director: \"\",\n    query_year: \"\"\n  })\n  \n  const inputChange = (e: any) => {\n    setForm({\n      ...form,\n      [e.target.id]: e.target.value\n    })\n  }\n  \n  const context: any = useContext(Context)\n\n  const { query, result, generateQuery, executeQuery, changeQuery } = context;\n\n  const generateQueryClick = () => {\n    generateQuery(form)\n  } \n\n  const executeQueryClick = () => {\n    executeQuery(query)\n  }\n\n  const changeQueryText = (e: any) => {\n    changeQuery(e.target.value)\n  }\n\n  \n  // Content Types\n  const [contentType, setContentType] = useState(\"item_programme\")\n\n  const contentTypes = [\n    {\n      value: \"item_programme\",\n      label: \"Item Programme\"\n    }\n  ]\n\n  const changeContentType = (e: any) => {\n    setContentType(e.target.value)\n  }\n\n  return (\n      <div className=\"app\">\n        <Header />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-4\">\n              <SelectInput id=\"content_type\" label=\"Content Type\" value={contentType} options={contentTypes} onChange={changeContentType}/>\n              <TextInput id=\"query_title\" label=\"Query title\" value={form.query_title} onChange={inputChange}/>\n              <TextInput id=\"query_director\" label=\"Query director\" value={form.query_director} onChange={inputChange}/>\n              <TextInput id=\"query_year\" label=\"Query year\" value={form.query_year} onChange={inputChange}/>\n              <button className=\"btn btn-primary btn-block\" onClick={generateQueryClick}>Generate query</button>\n              <button className=\"btn btn-danger btn-block\" onClick={executeQueryClick}>Run query</button>\n            </div>\n            <div className=\"col-sm\">\n              <TextResponse id=\"query\" label=\"Query\" value={query} rows={15} onChange={changeQueryText} />\n              <TextResponse id=\"result\" label=\"Result\" value={result} rows={15} onChange={() => null}/>\n            </div>\n          </div>\n        </div>\n      </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_QUERY, SET_RESULT } from \"./app.types\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_QUERY:\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case SET_RESULT:\n      return {\n        ...state,\n        result: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n","export const SET_QUERY = \"SET_QUERY\";\nexport const SET_RESULT = \"SET_RESULT\";\n\nexport const RESPONSE_ERROR = \"RESPONSE_ERROR\";\n","export default {\n  API_URL: \"https://fqma0mxypb.execute-api.eu-central-1.amazonaws.com/v1\",\n  ELASTIC_URL: \"https://search-matching-engine-nhygzot7nqafdvrzb3niwryuay.eu-central-1.es.amazonaws.com\"\n}","import React, { useReducer } from \"react\";\n\nimport Context from \"./app.context\";\nimport reducer from \"./app.reducer\";\n\n// Import libraries\nimport axios from \"axios\";\n\n// Import globals\nimport globals from \"../globals\";\n\nimport { SET_QUERY, SET_RESULT, RESPONSE_ERROR } from \"./app.types\";\n\nconst State = (props) => {\n  const initialState = {\n    query: {},\n    result: {},\n  };\n\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // changeQuery function\n  const changeQuery = async (query) => {\n    try {\n      dispatch({ type: SET_QUERY, payload: JSON.parse(query) });\n      \n    } catch(err){\n      console.log(`Query is NOT a valid JSON document`)\n    }\n  };\n\n  // generateQuery function\n  const generateQuery = async (params) => {\n    try {\n      const response = await axios.get(`${globals.API_URL}/queryGenerator`, {\n        params,\n      });\n\n      dispatch({ type: SET_QUERY, payload: response.data });\n    } catch (err) {\n      dispatch({ type: RESPONSE_ERROR });\n    }\n  };\n\n  // executeQuery function\n  const executeQuery = async (query) => {\n    try {\n      const response = await axios.post(\n        `${globals.API_URL}/queryCluster`,\n        query\n      );\n\n      dispatch({ type: SET_RESULT, payload: response.data });\n    } catch (err) {\n      dispatch({ type: RESPONSE_ERROR });\n    }\n  };\n\n  return (\n    <Context.Provider\n      value={{\n        ...state,\n        generateQuery,\n        executeQuery,\n        changeQuery,\n      }}\n    >\n      {props.children}\n    </Context.Provider>\n  );\n};\n\nexport default State;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport State from \"./context/app.state\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <State>\n      <App />\n    </State>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}